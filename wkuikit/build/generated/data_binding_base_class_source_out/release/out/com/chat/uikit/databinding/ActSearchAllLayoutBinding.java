// Generated by view binder compiler. Do not edit!
package com.chat.uikit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.chat.uikit.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActSearchAllLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView cancelTv;

  @NonNull
  public final LinearLayout findUserLayout;

  @NonNull
  public final LinearLayout groupLayout;

  @NonNull
  public final RecyclerView groupRecyclerView;

  @NonNull
  public final LinearLayout msgLayout;

  @NonNull
  public final RecyclerView msgRecyclerView;

  @NonNull
  public final LinearLayout resultView;

  @NonNull
  public final AppCompatEditText searchEt;

  @NonNull
  public final AppCompatImageView searchIv;

  @NonNull
  public final TextView searchKeyTv;

  @NonNull
  public final LinearLayout searchLayout;

  @NonNull
  public final LinearLayout userLayout;

  @NonNull
  public final RecyclerView userRecyclerView;

  private ActSearchAllLayoutBinding(@NonNull LinearLayout rootView, @NonNull TextView cancelTv,
      @NonNull LinearLayout findUserLayout, @NonNull LinearLayout groupLayout,
      @NonNull RecyclerView groupRecyclerView, @NonNull LinearLayout msgLayout,
      @NonNull RecyclerView msgRecyclerView, @NonNull LinearLayout resultView,
      @NonNull AppCompatEditText searchEt, @NonNull AppCompatImageView searchIv,
      @NonNull TextView searchKeyTv, @NonNull LinearLayout searchLayout,
      @NonNull LinearLayout userLayout, @NonNull RecyclerView userRecyclerView) {
    this.rootView = rootView;
    this.cancelTv = cancelTv;
    this.findUserLayout = findUserLayout;
    this.groupLayout = groupLayout;
    this.groupRecyclerView = groupRecyclerView;
    this.msgLayout = msgLayout;
    this.msgRecyclerView = msgRecyclerView;
    this.resultView = resultView;
    this.searchEt = searchEt;
    this.searchIv = searchIv;
    this.searchKeyTv = searchKeyTv;
    this.searchLayout = searchLayout;
    this.userLayout = userLayout;
    this.userRecyclerView = userRecyclerView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActSearchAllLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActSearchAllLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.act_search_all_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActSearchAllLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelTv;
      TextView cancelTv = ViewBindings.findChildViewById(rootView, id);
      if (cancelTv == null) {
        break missingId;
      }

      id = R.id.findUserLayout;
      LinearLayout findUserLayout = ViewBindings.findChildViewById(rootView, id);
      if (findUserLayout == null) {
        break missingId;
      }

      id = R.id.groupLayout;
      LinearLayout groupLayout = ViewBindings.findChildViewById(rootView, id);
      if (groupLayout == null) {
        break missingId;
      }

      id = R.id.groupRecyclerView;
      RecyclerView groupRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (groupRecyclerView == null) {
        break missingId;
      }

      id = R.id.msgLayout;
      LinearLayout msgLayout = ViewBindings.findChildViewById(rootView, id);
      if (msgLayout == null) {
        break missingId;
      }

      id = R.id.msgRecyclerView;
      RecyclerView msgRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (msgRecyclerView == null) {
        break missingId;
      }

      id = R.id.resultView;
      LinearLayout resultView = ViewBindings.findChildViewById(rootView, id);
      if (resultView == null) {
        break missingId;
      }

      id = R.id.searchEt;
      AppCompatEditText searchEt = ViewBindings.findChildViewById(rootView, id);
      if (searchEt == null) {
        break missingId;
      }

      id = R.id.searchIv;
      AppCompatImageView searchIv = ViewBindings.findChildViewById(rootView, id);
      if (searchIv == null) {
        break missingId;
      }

      id = R.id.searchKeyTv;
      TextView searchKeyTv = ViewBindings.findChildViewById(rootView, id);
      if (searchKeyTv == null) {
        break missingId;
      }

      id = R.id.searchLayout;
      LinearLayout searchLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchLayout == null) {
        break missingId;
      }

      id = R.id.userLayout;
      LinearLayout userLayout = ViewBindings.findChildViewById(rootView, id);
      if (userLayout == null) {
        break missingId;
      }

      id = R.id.userRecyclerView;
      RecyclerView userRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (userRecyclerView == null) {
        break missingId;
      }

      return new ActSearchAllLayoutBinding((LinearLayout) rootView, cancelTv, findUserLayout,
          groupLayout, groupRecyclerView, msgLayout, msgRecyclerView, resultView, searchEt,
          searchIv, searchKeyTv, searchLayout, userLayout, userRecyclerView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
