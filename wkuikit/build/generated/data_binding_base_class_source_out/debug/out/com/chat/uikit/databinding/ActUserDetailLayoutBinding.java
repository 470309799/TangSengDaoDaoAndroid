// Generated by view binder compiler. Do not edit!
package com.chat.uikit.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.chat.base.ui.components.AvatarView;
import com.chat.uikit.R;
import com.google.android.material.button.MaterialButton;
import com.scwang.smart.refresh.layout.SmartRefreshLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActUserDetailLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView appIdNumLeftTv;

  @NonNull
  public final TextView appIdNumTv;

  @NonNull
  public final MaterialButton applyBtn;

  @NonNull
  public final AvatarView avatarView;

  @NonNull
  public final TextView blacklistDescTv;

  @NonNull
  public final TextView blacklistTv;

  @NonNull
  public final LinearLayout complaintLayout;

  @NonNull
  public final LinearLayout deleteLayout;

  @NonNull
  public final LinearLayout fromLayout;

  @NonNull
  public final LinearLayout identityLayout;

  @NonNull
  public final LinearLayout inGroupNameLayout;

  @NonNull
  public final TextView inGroupNameTv;

  @NonNull
  public final LinearLayout joinGroupWayLayout;

  @NonNull
  public final TextView joinGroupWayTv;

  @NonNull
  public final TextView nameTv;

  @NonNull
  public final LinearLayout nickNameLayout;

  @NonNull
  public final TextView nickNameTv;

  @NonNull
  public final LinearLayout otherLayout;

  @NonNull
  public final LinearLayout pushBlackLayout;

  @NonNull
  public final SmartRefreshLayout refreshLayout;

  @NonNull
  public final LinearLayout remarkLayout;

  @NonNull
  public final MaterialButton sendMsgBtn;

  @NonNull
  public final AppCompatImageView sexIv;

  @NonNull
  public final TextView sourceFromTv;

  private ActUserDetailLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull TextView appIdNumLeftTv, @NonNull TextView appIdNumTv,
      @NonNull MaterialButton applyBtn, @NonNull AvatarView avatarView,
      @NonNull TextView blacklistDescTv, @NonNull TextView blacklistTv,
      @NonNull LinearLayout complaintLayout, @NonNull LinearLayout deleteLayout,
      @NonNull LinearLayout fromLayout, @NonNull LinearLayout identityLayout,
      @NonNull LinearLayout inGroupNameLayout, @NonNull TextView inGroupNameTv,
      @NonNull LinearLayout joinGroupWayLayout, @NonNull TextView joinGroupWayTv,
      @NonNull TextView nameTv, @NonNull LinearLayout nickNameLayout, @NonNull TextView nickNameTv,
      @NonNull LinearLayout otherLayout, @NonNull LinearLayout pushBlackLayout,
      @NonNull SmartRefreshLayout refreshLayout, @NonNull LinearLayout remarkLayout,
      @NonNull MaterialButton sendMsgBtn, @NonNull AppCompatImageView sexIv,
      @NonNull TextView sourceFromTv) {
    this.rootView = rootView;
    this.appIdNumLeftTv = appIdNumLeftTv;
    this.appIdNumTv = appIdNumTv;
    this.applyBtn = applyBtn;
    this.avatarView = avatarView;
    this.blacklistDescTv = blacklistDescTv;
    this.blacklistTv = blacklistTv;
    this.complaintLayout = complaintLayout;
    this.deleteLayout = deleteLayout;
    this.fromLayout = fromLayout;
    this.identityLayout = identityLayout;
    this.inGroupNameLayout = inGroupNameLayout;
    this.inGroupNameTv = inGroupNameTv;
    this.joinGroupWayLayout = joinGroupWayLayout;
    this.joinGroupWayTv = joinGroupWayTv;
    this.nameTv = nameTv;
    this.nickNameLayout = nickNameLayout;
    this.nickNameTv = nickNameTv;
    this.otherLayout = otherLayout;
    this.pushBlackLayout = pushBlackLayout;
    this.refreshLayout = refreshLayout;
    this.remarkLayout = remarkLayout;
    this.sendMsgBtn = sendMsgBtn;
    this.sexIv = sexIv;
    this.sourceFromTv = sourceFromTv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActUserDetailLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActUserDetailLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.act_user_detail_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActUserDetailLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appIdNumLeftTv;
      TextView appIdNumLeftTv = ViewBindings.findChildViewById(rootView, id);
      if (appIdNumLeftTv == null) {
        break missingId;
      }

      id = R.id.appIdNumTv;
      TextView appIdNumTv = ViewBindings.findChildViewById(rootView, id);
      if (appIdNumTv == null) {
        break missingId;
      }

      id = R.id.applyBtn;
      MaterialButton applyBtn = ViewBindings.findChildViewById(rootView, id);
      if (applyBtn == null) {
        break missingId;
      }

      id = R.id.avatarView;
      AvatarView avatarView = ViewBindings.findChildViewById(rootView, id);
      if (avatarView == null) {
        break missingId;
      }

      id = R.id.blacklistDescTv;
      TextView blacklistDescTv = ViewBindings.findChildViewById(rootView, id);
      if (blacklistDescTv == null) {
        break missingId;
      }

      id = R.id.blacklistTv;
      TextView blacklistTv = ViewBindings.findChildViewById(rootView, id);
      if (blacklistTv == null) {
        break missingId;
      }

      id = R.id.complaintLayout;
      LinearLayout complaintLayout = ViewBindings.findChildViewById(rootView, id);
      if (complaintLayout == null) {
        break missingId;
      }

      id = R.id.deleteLayout;
      LinearLayout deleteLayout = ViewBindings.findChildViewById(rootView, id);
      if (deleteLayout == null) {
        break missingId;
      }

      id = R.id.fromLayout;
      LinearLayout fromLayout = ViewBindings.findChildViewById(rootView, id);
      if (fromLayout == null) {
        break missingId;
      }

      id = R.id.identityLayout;
      LinearLayout identityLayout = ViewBindings.findChildViewById(rootView, id);
      if (identityLayout == null) {
        break missingId;
      }

      id = R.id.inGroupNameLayout;
      LinearLayout inGroupNameLayout = ViewBindings.findChildViewById(rootView, id);
      if (inGroupNameLayout == null) {
        break missingId;
      }

      id = R.id.inGroupNameTv;
      TextView inGroupNameTv = ViewBindings.findChildViewById(rootView, id);
      if (inGroupNameTv == null) {
        break missingId;
      }

      id = R.id.joinGroupWayLayout;
      LinearLayout joinGroupWayLayout = ViewBindings.findChildViewById(rootView, id);
      if (joinGroupWayLayout == null) {
        break missingId;
      }

      id = R.id.joinGroupWayTv;
      TextView joinGroupWayTv = ViewBindings.findChildViewById(rootView, id);
      if (joinGroupWayTv == null) {
        break missingId;
      }

      id = R.id.nameTv;
      TextView nameTv = ViewBindings.findChildViewById(rootView, id);
      if (nameTv == null) {
        break missingId;
      }

      id = R.id.nickNameLayout;
      LinearLayout nickNameLayout = ViewBindings.findChildViewById(rootView, id);
      if (nickNameLayout == null) {
        break missingId;
      }

      id = R.id.nickNameTv;
      TextView nickNameTv = ViewBindings.findChildViewById(rootView, id);
      if (nickNameTv == null) {
        break missingId;
      }

      id = R.id.otherLayout;
      LinearLayout otherLayout = ViewBindings.findChildViewById(rootView, id);
      if (otherLayout == null) {
        break missingId;
      }

      id = R.id.pushBlackLayout;
      LinearLayout pushBlackLayout = ViewBindings.findChildViewById(rootView, id);
      if (pushBlackLayout == null) {
        break missingId;
      }

      id = R.id.refreshLayout;
      SmartRefreshLayout refreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (refreshLayout == null) {
        break missingId;
      }

      id = R.id.remarkLayout;
      LinearLayout remarkLayout = ViewBindings.findChildViewById(rootView, id);
      if (remarkLayout == null) {
        break missingId;
      }

      id = R.id.sendMsgBtn;
      MaterialButton sendMsgBtn = ViewBindings.findChildViewById(rootView, id);
      if (sendMsgBtn == null) {
        break missingId;
      }

      id = R.id.sexIv;
      AppCompatImageView sexIv = ViewBindings.findChildViewById(rootView, id);
      if (sexIv == null) {
        break missingId;
      }

      id = R.id.sourceFromTv;
      TextView sourceFromTv = ViewBindings.findChildViewById(rootView, id);
      if (sourceFromTv == null) {
        break missingId;
      }

      return new ActUserDetailLayoutBinding((LinearLayout) rootView, appIdNumLeftTv, appIdNumTv,
          applyBtn, avatarView, blacklistDescTv, blacklistTv, complaintLayout, deleteLayout,
          fromLayout, identityLayout, inGroupNameLayout, inGroupNameTv, joinGroupWayLayout,
          joinGroupWayTv, nameTv, nickNameLayout, nickNameTv, otherLayout, pushBlackLayout,
          refreshLayout, remarkLayout, sendMsgBtn, sexIv, sourceFromTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
